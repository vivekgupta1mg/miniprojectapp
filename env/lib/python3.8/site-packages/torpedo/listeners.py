import aiotask_context as context
from sentry_sdk import init as sentry_init
from sentry_sdk.integrations.sanic import SanicIntegration

from .common_utils import CONFIG
from .db import RedisCache
from .exceptions import BadRequestException, JsonDecodeException
from .wrappers import cache_hosts


async def set_context_factory(_app, loop):
    loop.set_task_factory(context.task_factory)


def before_send(event, hint):
    if 'exc_info' in hint:
        exc_type, exc_value, traceback = hint['exc_info']
        if exc_type in [BadRequestException, JsonDecodeException]:
            return None
    return event


async def register_sentry_sdk(_app, loop):
    if _app.config.get("SENTRY_DSN"):
        sentry_init(
            dsn=_app.config.get("SENTRY_DSN"),
            integrations=[SanicIntegration()]
        )


async def register_redis_cache(_app, loop):
    if _app.ctx.multi_cache:
        cache_config = CONFIG.config['REDIS_CACHE_HOSTS']
        for label, conf in cache_config.items():
            label = label.lower().strip()
            cache_hosts[label] = RedisCache(conf['HOST'], conf['PORT'], loop=loop)
    else:
        cache_hosts['global'] = RedisCache(CONFIG.config['REDIS_HOST'],
                                           CONFIG.config['REDIS_PORT'], loop=loop)
    return cache_hosts
