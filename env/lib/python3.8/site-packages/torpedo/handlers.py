from sanic.exceptions import (Forbidden, MethodNotSupported, NotFound,
                              PayloadTooLarge, RequestTimeout, SanicException,
                              ServerError, ServiceUnavailable, Unauthorized)
from sanic.handlers import ErrorHandler
from sanic.log import error_logger, logger
from sanic.response import json

from .clients import apm_client
from .constants import STATUS_CODE_MAPPING, HTTPStatusCodes
from .exceptions import (BadRequestException, HTTPInterServiceRequestException,
                         JsonDecodeException)


def send_response(data, status_code=HTTPStatusCodes.SUCCESS.value, meta=None):
    """
    :param data: final response data
    :param status_code: success status code, default is 200
    :return {'is_success': True, 'data': data, 'status_code': status_code}
    :param meta results
    """

    status_code = STATUS_CODE_MAPPING.get(status_code) or status_code
    data = {
        'data': data,
        'is_success': True,
        'status_code': status_code
    }
    if meta:
        data['meta'] = meta
    return json(body=data, status=status_code)


def get_error_body_response(error: str, status_code, meta=None):
    """
        error will be dict like object
        error = {'message': 'an error occured', 'errors': [{'message': 'user not found'}]}
    """
    errors = list()

    errors.append({"message": error})

    status_code = STATUS_CODE_MAPPING.get(status_code) or status_code
    error_result = {
        'is_success': False,
        'status_code': status_code,
        'error': {
            'message': error,
            'errors': errors
        }
    }
    if meta:
        error_result['meta'] = meta
    return json(body=error_result, status=status_code)


async def ping(request):
    return json({'ping': 'pong'}, status=HTTPStatusCodes.SUCCESS.value)


class CustomExceptionHandler(ErrorHandler):

    def default(self, request, exception):
        response = None
        if isinstance(exception, (MethodNotSupported, NotFound)):
            logger.info("Handled exception {}, for method {}".format(
                exception.__class__.__name__, request.endpoint))
            apm_client.capture_exception()
            response = get_error_body_response(exception.args[0], exception.status_code)
        elif isinstance(exception, (SanicException, Unauthorized, Forbidden, RequestTimeout,
                                    PayloadTooLarge)):
            logger.info("Handled exception {}, for method {}".format(
                exception.__class__.__name__, request.endpoint))
            apm_client.capture_exception()
            response = get_error_body_response(exception.args[0], exception.status_code)
        elif isinstance(exception, (BadRequestException, JsonDecodeException)):
            logger.info("Handled exception {}, for method {}".format(
                exception.__class__.__name__, request.endpoint))
            response = get_error_body_response(exception.error, HTTPStatusCodes.BAD_REQUEST.value)
        elif isinstance(exception, HTTPInterServiceRequestException):
            error_logger.info(exception.error)
            apm_client.capture_exception()
            response = get_error_body_response(exception.error, exception.status_code,
                                               exception.meta)
        elif isinstance(exception, (Exception, ServerError, ServiceUnavailable)):
            error_logger.exception(exception)
            apm_client.capture_exception()
            response = get_error_body_response("Something went wrong",
                                               HTTPStatusCodes.INTERNAL_SERVER_ERROR.value)

        return response
