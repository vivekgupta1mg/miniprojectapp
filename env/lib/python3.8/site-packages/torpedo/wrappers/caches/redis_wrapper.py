import ujson as json

from ...common_utils import CONFIG, instrument
from .cache_host import cache_hosts


class Base:
    _service_prefix = CONFIG.config['NAME']
    _key_prefix = 'base'
    _delimiter = ':'

    @classmethod
    def prefixed_key(cls, key: str):
        """
        :param key:
        :return:
        """
        return cls._service_prefix + cls._delimiter + cls._key_prefix + cls._delimiter + key

    @classmethod
    @instrument(span_type="aioredis")
    async def set(cls, key, value, expire=0, host='global'):
        """
        :param key:
        :param value:
        :param expire:
        :param host:
        :return:
        """
        await cache_hosts[host].set_key(key=cls.prefixed_key(key), value=json.dumps(value),
                                        expire=expire)

    @classmethod
    @instrument(span_type="aioredis")
    async def get(cls, key, host='global'):
        """
        :param key:
        :param host:
        :return:
        """
        result = await cache_hosts[host].get_key(key=cls.prefixed_key(key))
        if result:
            result = json.loads(result)
        return result

    @classmethod
    @instrument(span_type="aioredis")
    async def delete(cls, key, host='global'):
        """
        :param key: key to delete
        :param host: host to be used
        :return: null
        """
        await cache_hosts[host].delete(key=cls.prefixed_key(key))

    @classmethod
    @instrument(span_type="aioredis")
    async def increment_value(cls, key, host='global'):
        """
        :param key: key to increment
        :param host: host to be used
        :return: null
        """
        await cache_hosts[host].increment_value(key=cls.prefixed_key(key))

    @classmethod
    @instrument(span_type="aioredis")
    async def hmset(cls, key, field, value, host='global'):
        """

        :param key:
        :param field:
        :param value:
        :param host: host to be used
        :return:
        """
        await cache_hosts[host].hmset(field, json.dumps(value), cls.prefixed_key(key))

    @classmethod
    @instrument(span_type="aioredis")
    async def hincrby(cls, key, field, value, host='global'):
        """
        :param key:
        :param field:
        :param value:
        :param host: host to be used
        :return:
        """
        await cache_hosts[host].hincrby(field, value, cls.prefixed_key(key))

    @classmethod
    @instrument(span_type="aioredis")
    async def hmgetall(cls, key, host='global'):
        """
        :param key:
        :param host: host to be used
        :return:
        """
        result = await cache_hosts[host].hgetall(cls.prefixed_key(key))
        return result

    @classmethod
    @instrument(span_type="aioredis")
    async def hmget(cls, key, field, host='global'):
        """
        :param key:
        :param field:
        :param host: host to be used
        :return:
        """
        result = await cache_hosts[host].hmget(field, cls.prefixed_key(key))
        return result
