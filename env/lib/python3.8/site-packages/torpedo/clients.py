import threading

from elasticapm import Client, async_capture_span
from elasticapm.instrumentation import register
from elasticapm.instrumentation.packages.asyncio.aiohttp_client import \
    AioHttpClientInstrumentation
from elasticapm.instrumentation.packages.asyncio.asyncpg import \
    AsyncPGInstrumentation
from elasticapm.instrumentation.packages.dbapi2 import extract_signature
from elasticapm.instrumentation.register import _instrumentation_singletons
from elasticapm.traces import DroppedSpan, execution_context
from elasticapm.utils import (default_ports, get_host_from_url, sanitize_url,
                              url_to_destination)
from elasticapm.utils.disttracing import TracingOptions
from elasticapm.utils.module_import import import_string

from .common_utils import CONFIG

_lock = threading.Lock()
apm_config = CONFIG.config.get('APM')
apm_config['SERVICE_NAME'] = CONFIG.config.get('NAME', 'undefined')


class CustomAioHttpClientInstrumentation(AioHttpClientInstrumentation):

    async def call(self, module, method, wrapped, instance, args, kwargs):
        method = kwargs["method"] if "method" in kwargs else args[0]
        url = kwargs["url"] if "url" in kwargs else args[1]
        url = str(url)
        destination = url_to_destination(url)

        signature = " ".join([method.upper(), get_host_from_url(url)])
        sub_type = get_host_from_url(url)
        url = sanitize_url(url)
        transaction = execution_context.get_transaction()

        async with async_capture_span(
            signature,
            span_type="external",
            span_subtype=sub_type,
            extra={"http": {"url": url}, "destination": destination},
            leaf=True,
        ) as span:
            leaf_span = span
            while isinstance(leaf_span, DroppedSpan):
                leaf_span = leaf_span.parent

            parent_id = leaf_span.id if leaf_span else transaction.id
            trace_parent = transaction.trace_parent.copy_from(
                span_id=parent_id, trace_options=TracingOptions(recorded=True)
            )
            headers = kwargs.get("headers") or {}
            self._set_disttracing_headers(headers, trace_parent, transaction)
            kwargs["headers"] = headers
            response = await wrapped(*args, **kwargs)
            if response:
                if span.context:
                    span.context["http"]["status_code"] = response.status
                span.set_success() if response.status < 400 else span.set_failure()  # pylint: disable=W0106
            return response


class CustomAsyncPGInstrumentation(AsyncPGInstrumentation):

    async def call(self, module, method, wrapped, instance, args, kwargs):
        query = args[0] if len(args) else kwargs["query"]
        name = extract_signature(query)

        context = {"db": {"type": "sql", "statement": query}}
        action = "query"
        destination_info = {
            "address": kwargs.get("host", "localhost"),
            "port": int(kwargs.get("port", default_ports.get("postgresql"))),
            "service": {"name": "postgres", "resource": "postgres", "type": "db"},
        }
        context['destination'] = destination_info
        async with async_capture_span(
            name, leaf=True, span_type="db", span_subtype="postgres", span_action=action, extra=context
        ):
            return await wrapped(*args, **kwargs)


def instrument():
    """
    Instruments all registered methods/functions with a wrapper
    """
    with _lock:
        for obj in register.get_instrumentation_objects():
            custom = False
            if isinstance(obj, AioHttpClientInstrumentation):
                obj = 'torpedo.clients.CustomAioHttpClientInstrumentation'
                custom = True
            elif isinstance(obj, AsyncPGInstrumentation):
                obj = 'torpedo.clients.CustomAsyncPGInstrumentation'
                custom = True
            if custom:
                cls = import_string(obj)
                _instrumentation_singletons[obj] = cls()
                obj = _instrumentation_singletons[obj]
            obj.instrument()


apm_client = Client(config=apm_config)
instrument()
