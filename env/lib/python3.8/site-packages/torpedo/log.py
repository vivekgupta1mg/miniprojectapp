import datetime
import logging

import aiotask_context as context


class RequestIdFilter(logging.Filter):
    def filter(self, record):
        try:
            record.request_id = context.get("X-REQUEST-ID")
            record.agent = context.get("user-agent")
        except ValueError:
            record.request_id = "-"
        return True


class AgentFilter(logging.Filter):
    def filter(self, record):
        try:
            record.agent = context.get("X-USER-AGENT")
        except ValueError:
            record.agent = "-"
        return True


class CustomTimeLoggingFormatter(logging.Formatter):

    def formatTime(self, record, datefmt=None):  # noqa
        """
        Overrides formatTime method to use datetime module instead of time module
        to display time in microseconds. Time module by default does not resolve
        time to microseconds.
        """

        record.branchname = None

        if datefmt:
            s = datetime.datetime.now().strftime(datefmt)
        else:
            t = datetime.datetime.now().strftime(self.default_time_format)
            s = self.default_msec_format % (t, record.msecs)
        return s


LOGGING_CONFIG_DEFAULTS = dict(
    version=1,
    disable_existing_loggers=False,
    loggers={
        "sanic.root": {
            "level": "INFO",
            "handlers": ["console"]
        },
        "sanic.error": {
            "level": "DEBUG",
            "handlers": ["error_console", "exception_console"],
            "qualname": "error",
            "propagate": False
        },
        "sanic.access": {
            "level": "INFO",
            "handlers": ["access_console"],
            "qualname": "access",
            "propagate": False
        },
    },
    handlers={
        "console": {
            "class": "logging.FileHandler",
            "formatter": "generic",
            "filename": "logs/torpedo_service.log"
        },
        "access_console": {
            "class": "logging.FileHandler",
            "formatter": "access",
            "filename": "logs/torpedo_service.log",
            "filters": ["request_id", "agent"],
        },
        "error_console": {
            "class": "logging.FileHandler",
            "formatter": "generic",
            "filename": "logs/torpedo_service.log"
        },
        "exception_console": {
            "class": "logging.FileHandler",
            "formatter": "generic",
            "filename": "logs/torpedo_exceptions.log"
        }
    },
    filters={
        "request_id": {
            "()": RequestIdFilter,
        },
        "agent": {
            "()": AgentFilter,
        },
    },
    formatters={
        "generic": {
            "format": "%(asctime)s - %(name)s - %(levelname)s - %(message)s",
            "datefmt": "%Y-%m-%d %H:%M:%S,%f",
            "class": "torpedo.log.CustomTimeLoggingFormatter",
        },
        "access": {
            "format": "%(asctime)s - %(name)s - %(levelname)s - %(host)s %(request)s %(message)s %(status)d %(byte)d "
                      "%(agent)s %(request_id)s",
            "class": "torpedo.log.CustomTimeLoggingFormatter",
            "datefmt": "%Y-%m-%d %H:%M:%S,%f",
        },
    },
)
