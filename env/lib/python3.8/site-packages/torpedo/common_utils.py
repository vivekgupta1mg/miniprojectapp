import random
import time
import uuid
from functools import wraps

import elasticapm
import ujson as json
from sanic.log import logger


def get_current_time():
    return int(time.time())


def get_uuid_token():
    return str(uuid.uuid4())


def create_random_token():
    return random.randint(100000, 999999)


def json_file_to_dict(_file: str) -> dict:
    """
    convert json file data to dict

    :param str _file: file location including name

    :rtype: dict
    :return: converted json to dict
    """
    config = None
    try:
        with open(_file) as config_file:
            config = json.load(config_file)
    except (TypeError, FileNotFoundError, ValueError) as exception:
        print(exception)

    return config


class CONFIG:
    config = json_file_to_dict('/Users/vivek/Desktop/sanic_3/config.json')


def log_combined_error(title, error):
    request_params = {"exception": error}
    logger.error(title, extra=request_params)
    combined_error = title + ' ' + error
    logger.info(combined_error)


def log_combined_exception(title, exception):
    error = 'Exception type {} , exception {}'.format(type(exception), exception)
    log_combined_error(title, error)


def instrument(span_type):
    def decorator(func):
        @wraps(func)
        async def wrapper(*args, **kwargs):
            async with elasticapm.async_capture_span(name='{}.{}'.format(span_type,
                                                                         func.__name__), span_type=span_type):
                return await func(*args, **kwargs)
        return wrapper
    return decorator
